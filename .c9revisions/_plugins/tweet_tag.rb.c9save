{"ts":1381669520110,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1381669530473,"patch":[[{"diffs":[[1,"# A Liquid tag for Jekyll sites that allows embedding tweets using Twitter's\n# oEmbed API, and showing the tweet as a blockquote for non-JavaScript enabled\n# browsers and readers.\n#\n# Author: Scott W. Bradley\n# Source URL: https://github.com/scottwb/jekyll-tweet-tag\n#\n# Example usage:\n#   {% tweet https://twitter.com/DEVOPS_BORAT/status/159849628819402752 %}\n#\n# Documentation:\n#   https://github.com/scottwb/jekyll-tweet-tag/blob/master/README.md\n#\nrequire 'json'\n\nmodule Jekyll\n  class TweetTag < Liquid::Tag\n\n    TWITTER_OEMBED_URL = \"https://api.twitter.com/1/statuses/oembed.json\"\n\n    def initialize(tag_name, text, tokens)\n      super\n      @text           = text\n      @cache_disabled = false\n      @cache_folder   = File.expand_path \"../.tweet-cache\", File.dirname(__FILE__)\n      FileUtils.mkdir_p @cache_folder\n    end\n\n    def render(context)\n      args       = @text.split(/\\s+/).map(&:strip)\n      api_params = {'url' => args.shift}\n\n      args.each do |arg|\n        k,v = arg.split('=').map(&:strip)\n        if k && v\n          if v =~ /^'(.*)'$/\n            v = $1\n          end\n          api_params[k] = v\n        end\n      end\n\n      html_output_for(api_params)\n    end\n\n    def html_output_for(api_params)\n      body = \"Tweet could not be processed\"\n      if response = cached_response(api_params) || live_response(api_params)\n        body = response['html'] || response['error'] || body\n      end\n      \"<div class='embed tweet'>#{body}</div>\"\n    end\n\n    def cache(api_params, data)\n      cache_file = cache_file_for(api_params)\n      File.open(cache_file, \"w\") do |f|\n        f.write(data)\n      end\n    end\n\n    def cached_response(api_params)\n      return nil if @cache_disabled\n      cache_file = cache_file_for(api_params)\n      JSON.parse(File.read(cache_file)) if File.exist?(cache_file)\n    end\n\n    def url_params_for(api_params)\n      api_params.keys.sort.map do |k|\n        \"#{CGI::escape(k)}=#{CGI::escape(api_params[k])}\"\n      end.join('&')\n    end\n\n    def cache_file_for(api_params)\n      filename = \"#{Digest::MD5.hexdigest(url_params_for(api_params))}.cache\"\n      File.join(@cache_folder, filename)\n    end\n\n    def live_response(api_params)\n      api_uri = URI.parse(TWITTER_OEMBED_URL + \"?#{url_params_for(api_params)}\")\n      response = Net::HTTP.get(api_uri.host, api_uri.request_uri)\n      cache(api_params, response) unless @cache_disabled\n      JSON.parse(response)\n    end\n  end\n\n  class TweetTagNoCache < TweetTag\n    def initialize(tag_name, text, token)\n      super\n      @cache_disabled = true\n    end\n  end\nend\n\nLiquid::Template.register_tag('tweet', Jekyll::TweetTag)\nLiquid::Template.register_tag('tweetnocache', Jekyll::TweetTagNoCache)"]],"start1":0,"start2":0,"length1":0,"length2":2695}]],"length":2695,"saved":false}
{"contributors":[],"silentsave":false,"ts":1381669602089,"patch":[[{"diffs":[[0,"e 'json'"],[1,"\nrequire 'net/http'"],[0,"\n\nmodule"]],"start1":458,"start2":458,"length1":16,"length2":35}]],"length":2714,"saved":false}
{"ts":1381670028987,"patch":[[{"diffs":[[0,"d tweet'"],[1," style=' '"],[0,">#{body}"]],"start1":1461,"start2":1461,"length1":16,"length2":26}]],"length":2724,"saved":false}
{"ts":1381670042163,"patch":[[{"diffs":[[0," style='"],[-1," "],[1,"position: relative; display: block; width: 500px; margin: 0px auto;"],[0,"'>#{body"]],"start1":1469,"start2":1469,"length1":17,"length2":83}]],"length":2790,"saved":false}
